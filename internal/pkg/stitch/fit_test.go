package stitch

import (
	"image"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

const fps = 30

func genTestSeq(dx []int) sequence {
	t0 := time.Now()

	seq := sequence{startTS: &t0}
	for i, dx := range dx {
		seq.frames = append(seq.frames, &image.RGBA{})
		seq.dx = append(seq.dx, dx)
		seq.ts = append(seq.ts, t0.Add(time.Second/fps*time.Duration(i+1)))
	}
	return seq
}

func sumAbs(val []int) int {
	var ret int
	for _, v := range val {
		ret += v
	}
	if ret < 0 {
		return -ret
	}
	return ret
}

func Test_fitDx_simple(t *testing.T) {
	// Real data from a video.
	dx := []int{
		34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 1, 35, 35, 35, 35, 35, 35, 35, 35, 36, 35, 36, 35, 35, 35, 35, 36, 35, 36, 21, 35, 35, 36, 35, 35, 36, 36, 36, 35, 36, 35, 36, 35, 36, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 35, 35, 36, 36, 36, 36, 36, 36, 36, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 36, 37, 37, 37, 37, 37, 36, 37, 36, 37, 37, 37, 37, 37, 37, 37, 36, 36, 36, 37, 37, 37, 36, 36, 36, 24,
	}

	res, ds, v0, a, err := fitDx(genTestSeq(dx), 35*fps*2)
	require.NoError(t, err)
	assert.Equal(t, len(dx), len(res))
	// Found to be good by looking at plot.
	truth := []int{
		35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 35, 36, 36, 35, 36, 35, 36, 36, 35, 36, 36, 35, 36, 36, 35, 36, 36, 36, 36, 35, 36, 36, 36, 36, 36, 36, 36, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 36, 37, 36, 37, 36, 37, 37, 36, 37, 37, 36, 37, 37, 37, 36, 37,
	}
	assert.Equal(t, truth, res)
	assert.InDelta(t, 34.8, v0/fps, 0.1)
	assert.InDelta(t, 14.2, a, 0.1)
	assert.InDelta(t, sumAbs(truth), ds, 20)
}

func Test_fitDx_difficult(t *testing.T) {
	// Real data from a video.
	dx := []int{
		36, 36, 41, 36, 35, 0, 0, 40, 36, 37, 36, 42, 41, 17, 35, 35, 42, 41, 17, 41, 36, 41, 17, 0, 35, 36, 36,
		40, 35, 42, 41, 41, 36, 40, 36, 35, 0, 40, 36, 36, 36, 42, 35, 42, 36, 42, 36, 41, 36, 0, 41, 36, 41, 17,
		0, 36, 41, 40, 36, 41, 42, 35, 41, 41, 40, 41, 17, 41, 36, 42, 41, 36, 41, 17, 42, 17, 41, 17, 41, 18, 36,
		40, 36, 35, 0, 37, 41, 36, 36, 35, 37, 36, 36, 36, 36, 36, 40, 0, 41, 36, 41, 36, 42, 36, 42, 37, 42, 40,
		35, 41, 42, 37, 41, 35, 0, 17, 36, 36, 36, 36, 36, 0, 36, 36, 36, 36, 35, 17, 0, 36, 36, 35, 35, 41, 40,
		42, 41, 35, 36, 36, 41, 41, 36, 40, 17, 40, 36, 36, 35, 36, 17, 36, 40, 40, 36, 41, 36, 35, 0, 37, 36, 36,
		36, 40, 35, 42, 35, 41, 35, 40, 35, 41, 41, 36, 40, 17, 40, 36, 37, 40, 35, 42, 41, 35, 0, 40, 36, 36, 0,
		41, 36, 40, 40, 42, 41, 17, 41, 17, 41, 17, 41, 17, 35, 36, 41, 35, 0, 35, 40, 36, 36, 36, 42, 35, 40, 36,
		36, 35, 36, 0, 41, 36, 40, 36, 42, 35, 41, 36, 42, 36, 42, 36, 41, 36, 42, 35, 0, 17, 36, 41, 36, 36, 36,
		36, 36, 36, 36, 36, 17, 17, 0, 36, 40, 41, 35, 36, 36, 42, 41, 35, 35, 35, 42, 40, 36, 37, 0, 40, 40, 41,
		36, 36, 35, 42, 35, 37, 36, 41, 40, 17, 0, 36, 42, 41, 35, 41, 17, 41, 35, 39, 35, 40, 35, 41, 40, 36, 36,
		0, 40, 41, 36, 37, 35, 42, 40, 40, 36, 40, 36, 35, 0, 41, 36, 37, 35, 42, 36, 42, 36, 42, 40, 0, 41, 17,
		41, 36, 42, 17, 0, 36, 40, 41, 36, 36, 42, 35, 40, 41, 36, 35, 35, 17, 40, 36, 42, 36, 41, 35, 40, 35, 40,
		35, 42, 35, 41, 36, 41, 17, 0, 17, 36, 41, 36, 36, 35,
	}

	res, ds, v0, a, err := fitDx(genTestSeq(dx), 35*fps*2)
	require.NoError(t, err)
	assert.Equal(t, len(dx), len(res))
	// Found to be good by looking at plot.
	truth := []int{
		36, 37, 36, 37, 36, 37, 36, 37, 36, 37, 36, 36, 37, 36, 37, 36, 37, 36, 36, 37, 36, 37, 36, 37, 36, 36, 37, 36, 36, 37, 36, 37, 36, 36, 37, 36, 37, 36, 36, 37, 36, 36, 37, 36, 36, 37, 36, 36, 37, 36, 36, 37, 36, 36, 37, 36, 36, 37, 36, 36, 37, 36, 36, 36, 37, 36, 36, 37, 36, 36, 36, 37, 36, 36, 36, 37, 36, 36, 36, 37, 36, 36, 36, 37, 36, 36, 36, 37, 36, 36, 36, 36, 37, 36, 36, 36, 36, 37, 36, 36, 36, 36, 37, 36, 36, 36, 36, 36, 37, 36, 36, 36, 36, 36, 37, 36, 36, 36, 36, 36, 36, 37, 36, 36, 36, 36, 36, 36, 36, 36, 37, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 35, 36, 36, 36, 36, 36, 36, 36, 36, 35, 36, 36, 36, 36, 36, 36, 35, 36, 36, 36, 36, 36, 36, 35, 36, 36, 36, 36, 35, 36, 36, 36, 36, 36, 35, 36, 36, 36, 35, 36, 36, 36, 36, 35, 36, 36, 36, 35, 36, 36, 36, 35, 36, 36, 36, 35, 36, 36, 36, 35, 36, 36, 36, 35, 36, 36, 35, 36, 36, 36, 35, 36, 36, 35, 36, 36, 35, 36, 36, 35, 36, 36, 35, 36, 36, 35, 36, 36, 35, 36, 36, 35, 36, 36, 35, 36, 35, 36, 36, 35, 36, 36, 35, 36, 35, 36, 36, 35, 36, 35, 36, 36, 35, 36, 35, 36, 35, 36, 36, 35, 36, 35, 36, 35, 36, 35, 36, 35, 36, 36, 35, 36, 35, 36, 35, 36, 35, 36, 35, 36, 35, 36, 35, 36, 35, 36, 35, 36, 35, 36, 35, 36, 35, 36, 35, 35, 36, 35, 36, 35, 36, 35,
	}

	assert.Equal(t, truth, res)
	assert.InDelta(t, 36.4, v0/fps, 0.1)
	assert.InDelta(t, -2.5, a, 0.1)
	assert.InDelta(t, sumAbs(truth), ds, 50)
}

func Test_fitDx_negative(t *testing.T) {
	dx := []int{
		-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,
	}

	res, ds, v0, a, err := fitDx(genTestSeq(dx), 10*fps*2)
	require.NoError(t, err)
	assert.Equal(t, len(dx), len(res))
	truth := []int{-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10}
	assert.Equal(t, truth, res)
	assert.InDelta(t, -10, v0/fps, 0.01)
	assert.InDelta(t, 0, a, 0.01)
	assert.InDelta(t, sumAbs(truth), ds, 1)
}

func Test_fitDx_rounding(t *testing.T) {
	dx := []int{
		9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
		10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
	}

	res, _, _, _, err := fitDx(genTestSeq(dx), 10*fps*2)
	require.NoError(t, err)
	assert.Equal(t, len(dx), len(res))
	truth := []int{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10}
	assert.Equal(t, truth, res)
}
